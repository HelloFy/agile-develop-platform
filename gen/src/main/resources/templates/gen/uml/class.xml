<?xml version="1.0" encoding="utf-8"?>
<template>
    <name>class</name>
    <filePath>src/main/java/${class.packageName}</filePath>
    <fileName>${class.name}.java</fileName>
    <content><![CDATA[
package ${class.packageName};
import java.util.*;

${class.visibility} class <#if (class.finalSpecialization)> final</#if> <#if (class.virtual)>abstract</#if> ${class.name} <#if class.umlRelation??> <#if class.umlRelation.parentClass??> extends ${class.umlRelation.parentClass.name}</#if> <#if class.umlRelation.impInterfaces?? && (class.umlRelation.impInterfaces?size>0)> implements <#assign insertImps><#list class.umlRelation.impInterfaces as imp>${imp.name},</#list></#assign> ${insertImps?substring(0, insertImps?last_index_of(","))}</#if></#if> {
<#if class.attributes?? && (class.attributes?size>0)>
    <#list class.attributes as attr>
     ${attr.visibility} <#if attr.statics>static </#if><#if attr.readOnly>final </#if> <#if attr.javaType??> <#if attr.list> List<${attr.javaType.realType}> <#else> <#if attr.arraySize == 0> ${attr.javaType.realType} <#else> ${attr.javaType.realType}[] </#if> </#if> <#else> <#if attr.list> List<${attr.otherType}> <#else> <#if attr.arraySize == 0> ${attr.otherType} <#else> ${attr.otherType}[] </#if> </#if> </#if>  ${attr.name} <#if attr.defaultValue??> = <#if attr.defaultValue.valueType == 'String'> "${attr.defaultValue.value}" <#else> ${attr.defaultValue.value} </#if> </#if> ;
    </#list>
</#if>

<#if class.umlRelation??>
   <#if class.umlRelation.composes?? && (class.umlRelation.composes?size>0)>
       <#list class.umlRelation.composes as c>
            <#if c.composeClass?? >
     ${c.visibility} <#if c.multiplicitytype??><#if c.multiplicitytype.multiplicity == '0' || c.multiplicitytype.multiplicity == '0..1' >${c.composeClass.name}<#else>List<${c.composeClass.name}></#if></#if> ${c.fieldName};
            </#if>
            <#if c.composeInterface?? >
     ${c.visibility} <#if c.multiplicitytype??><#if c.multiplicitytype.multiplicity == '0' || c.multiplicitytype.multiplicity == '0..1' >${c.composeInterface.name}<#else>List<${c.composeInterface.name}></#if></#if> ${c.fieldName};
            </#if>
            <#if c.composeEnum??>
     ${c.visibility} <#if c.multiplicitytype??><#if c.multiplicitytype.multiplicity == '0' || c.multiplicitytype.multiplicity == '0..1' >${c.composeEnum.name}<#else>List<${c.composeEnum.name}></#if></#if> ${c.fieldName};
            </#if>
       </#list>
    </#if>
    <#if class.umlRelation.innerClasses?? && (class.umlRelation.innerClasses?size>0)>
        <#list class.umlRelation.innerClasses as ic>
        </#list>
    </#if>
    <#if class.umlRelation.innerInterfaces?? && (class.umlRelation.innerInterfaces?size>0)>
        <#list class.umlRelation.innerInterfaces as ii>
            ${ii.visibility} interface ${ii.name}<#if ii.umlRelation??><#if ii.umlRelation.impInterfaces?? && (ii.umlRelation.impInterfaces?size>0)> extends <#assign insertImps><#list ii.umlRelation.impInterfaces as imp> ${imp.name}, </#list></#assign> ${insertImps?substring(0, insertImps?last_index_of(","))}</#if></#if> {
                <#if ii.attributes?? && (ii.attributes?size>0)>
                    <#list interface.attributes as attr>
        <#if attr.readOnly>final </#if> <#if attr.javaType??> <#if attr.list> List<${attr.javaType.realType}> <#else> <#if attr.arraySize == 0> ${attr.javaType.realType} <#else> ${attr.javaType.realType}[] </#if> </#if> <#else> <#if attr.list> List<${attr.otherType}> <#else> <#if attr.arraySize == 0> ${attr.otherType} <#else> ${attr.otherType}[] </#if> </#if> </#if>  ${attr.name} <#if attr.defaultValue??> = <#if attr.defaultValue.valueType == 'String'> "${attr.defaultValue.value}" <#else> ${attr.defaultValue.value} </#if> </#if> ;
                    </#list>
                </#if>
                <#if ii.operations?? && (ii.operations?size>0)>
                     <#list ii.operations as op>
                 ${op.visibility} <#if op.concurrency.concurrency??> <#if op.concurrency.concurrency == 'concurrent'> synchronized </#if> </#if> <#if op.paramterOut??> <#if op.paramterOut.javaType??> <#if op.paramterOut.list> List<${op.paramterOut.javaType.realType}> <#else> <#if op.paramterOut.arraySize == 0> ${op.paramterOut.javaType.realType} <#else> ${op.paramterOut.javaType.realType}[] </#if> </#if> <#else> <#if op.paramterOut.list> List <${op.paramterOut.otherType} > <#else> <#if op.paramterOut.arraySize == 0> ${op.paramterOut.otherType} <#else> ${op.paramterOut.otherType}[] </#if> </#if> </#if> <#else> void </#if> ${op.name} <#if op.paramterIn?? && (op.paramterIn?size>0)> <#assign paraIn> <#list op.paramterIn as pin> <#if pin.javaType??> <#if pin.list> List < ${pin.javaType.realType} > ${pin.name}, <#else> <#if pin.arraySize == 0> ${pin.javaType.realType} ${pin.name}, <#else> ${pin.javaType.realType}[] ${pin.name}, </#if> </#if> <#else> <#if pin.list> List < ${pin.otherType} > ${pin.name}, <#else> <#if pin.arraySize == 0> ${pin.otherType} ${pin.name}, <#else> ${pin.otherType}[] ${pin.name}, </#if> </#if> </#if> </#list> </#assign> ( ${paraIn?substring(0, paraIn?last_index_of(","))} ); <#else> (); </#if>
                    </#list>
                </#if>
            }
        </#list>
    </#if>
    <#if class.umlRelation.innerEnums?? && (class.umlRelation.innerEnums?size>0)>
        <#list class.umlRelation.innerEnums as ie>
        ${ie.visibility} enum ${ie.name} {
        <#if ie.literals?? && (ie.literals?size>0)>
            <#assign lts>
                <#list ie.literals as t>${t.name},</#list>
            </#assign>
            ${lts?substring(0, lts?last_index_of(","))};
        </#if>
        }
        </#list>
    </#if>
</#if>

<#if class.operations?? && (class.operations?size>0)>
   <#list class.operations as op>
    <#if op.virtual>
     ${op.visibility} <#if op.concurrency.concurrency??> <#if op.concurrency.concurrency == 'concurrent'> synchronized </#if> </#if> <#if op.paramterOut??> <#if op.paramterOut.javaType??> <#if op.paramterOut.list> List<${op.paramterOut.javaType.realType}> <#else> <#if op.paramterOut.arraySize == 0> ${op.paramterOut.javaType.realType} <#else> ${op.paramterOut.javaType.realType}[] </#if> </#if> <#else> <#if op.paramterOut.list> List <${op.paramterOut.otherType} > <#else> <#if op.paramterOut.arraySize == 0> ${op.paramterOut.otherType} <#else> ${op.paramterOut.otherType}[] </#if> </#if> </#if> <#else> void </#if> ${op.name} <#if op.paramterIn?? && (op.paramterIn?size>0)> <#assign paraIn> <#list op.paramterIn as pin> <#if pin.javaType??> <#if pin.list> List < ${pin.javaType.realType} > ${pin.name}, <#else> <#if pin.arraySize == 0> ${pin.javaType.realType} ${pin.name}, <#else> ${pin.javaType.realType}[] ${pin.name}, </#if> </#if> <#else> <#if pin.list> List < ${pin.otherType} > ${pin.name}, <#else> <#if pin.arraySize == 0> ${pin.otherType} ${pin.name}, <#else> ${pin.otherType}[] ${pin.name}, </#if> </#if> </#if> </#list> </#assign> ( ${paraIn?substring(0, paraIn?last_index_of(","))} ); <#else> (); </#if>
     <#else>
     ${op.visibility} <#if op.concurrency.concurrency??> <#if op.concurrency.concurrency == 'concurrent'> synchronized </#if> </#if> <#if op.paramterOut??> <#if op.paramterOut.javaType??> <#if op.paramterOut.list> List<${op.paramterOut.javaType.realType}> <#else> <#if op.paramterOut.arraySize == 0> ${op.paramterOut.javaType.realType} <#else> ${op.paramterOut.javaType.realType}[] </#if> </#if> <#else> <#if op.paramterOut.list> List <${op.paramterOut.otherType} > <#else> <#if op.paramterOut.arraySize == 0> ${op.paramterOut.otherType} <#else> ${op.paramterOut.otherType}[] </#if> </#if> </#if> <#else> void </#if> ${op.name} <#if op.paramterIn?? && (op.paramterIn?size>0)> <#assign paraIn> <#list op.paramterIn as pin> <#if pin.javaType??> <#if pin.list> List < ${pin.javaType.realType} > ${pin.name}, <#else> <#if pin.arraySize == 0> ${pin.javaType.realType} ${pin.name}, <#else> ${pin.javaType.realType}[] ${pin.name}, </#if> </#if> <#else> <#if pin.list> List < ${pin.otherType} > ${pin.name}, <#else> <#if pin.arraySize == 0> ${pin.otherType} ${pin.name}, <#else> ${pin.otherType}[] ${pin.name}, </#if> </#if> </#if> </#list> </#assign> ( ${paraIn?substring(0, paraIn?last_index_of(","))} ) <#else> () </#if>{
        <#if op.paramterOut??>
            return null;
        </#if>
     }
    </#if>
   </#list>
</#if>



}
]]>
    </content>
</template>